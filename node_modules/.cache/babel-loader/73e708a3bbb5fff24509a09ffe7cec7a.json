{"ast":null,"code":"import useCustomEffect from './useCustomEffect';\nimport { dequal } from 'dequal';\nimport useImmediateUpdateEffect from './useImmediateUpdateEffect';\nimport useEventCallback from './useEventCallback';\nimport { useState } from 'react';\n\nfunction isDepsEqual(_ref, _ref2) {\n  var nextElement = _ref[0],\n      nextConfig = _ref[1];\n  var prevElement = _ref2[0],\n      prevConfig = _ref2[1];\n  return nextElement === prevElement && dequal(nextConfig, prevConfig);\n}\n/**\n * Observe mutations on a DOM node or tree of DOM nodes.\n * Depends on the `MutationObserver` api.\n *\n * ```tsx\n * const [element, attachRef] = useCallbackRef(null);\n *\n * useMutationObserver(element, { subtree: true }, (records) => {\n *\n * });\n *\n * return (\n *   <div ref={attachRef} />\n * )\n * ```\n *\n * @param element The DOM element to observe\n * @param config The observer configuration\n * @param callback A callback fired when a mutation occurs\n */\n\n\nfunction useMutationObserver(element, config, callback) {\n  var _useState = useState(null),\n      records = _useState[0],\n      setRecords = _useState[1];\n\n  var handler = useEventCallback(callback || setRecords);\n  useCustomEffect(function () {\n    if (!element) return; // The behavior around reusing mutation observers is confusing\n    // observing again _should_ disable the last listener but doesn't\n    // seem to always be the case, maybe just in JSDOM? In any case the cost\n    // to redeclaring it is gonna be fairly low anyway, so make it simple\n\n    var observer = new MutationObserver(handler);\n    observer.observe(element, config);\n    return function () {\n      observer.disconnect();\n    };\n  }, [element, config], {\n    isEqual: isDepsEqual,\n    // Intentionally done in render, otherwise observer will miss any\n    // changes made to the DOM during this update\n    effectHook: useImmediateUpdateEffect\n  });\n  return callback ? void 0 : records || [];\n}\n\nexport default useMutationObserver;","map":{"version":3,"names":["useCustomEffect","dequal","useImmediateUpdateEffect","useEventCallback","useState","isDepsEqual","_ref","_ref2","nextElement","nextConfig","prevElement","prevConfig","useMutationObserver","element","config","callback","_useState","records","setRecords","handler","observer","MutationObserver","observe","disconnect","isEqual","effectHook"],"sources":["/home/kokegg/proyectoKaren/node_modules/@restart/hooks/esm/useMutationObserver.js"],"sourcesContent":["import useCustomEffect from './useCustomEffect';\nimport { dequal } from 'dequal';\nimport useImmediateUpdateEffect from './useImmediateUpdateEffect';\nimport useEventCallback from './useEventCallback';\nimport { useState } from 'react';\n\nfunction isDepsEqual(_ref, _ref2) {\n  var nextElement = _ref[0],\n      nextConfig = _ref[1];\n  var prevElement = _ref2[0],\n      prevConfig = _ref2[1];\n  return nextElement === prevElement && dequal(nextConfig, prevConfig);\n}\n/**\n * Observe mutations on a DOM node or tree of DOM nodes.\n * Depends on the `MutationObserver` api.\n *\n * ```tsx\n * const [element, attachRef] = useCallbackRef(null);\n *\n * useMutationObserver(element, { subtree: true }, (records) => {\n *\n * });\n *\n * return (\n *   <div ref={attachRef} />\n * )\n * ```\n *\n * @param element The DOM element to observe\n * @param config The observer configuration\n * @param callback A callback fired when a mutation occurs\n */\n\n\nfunction useMutationObserver(element, config, callback) {\n  var _useState = useState(null),\n      records = _useState[0],\n      setRecords = _useState[1];\n\n  var handler = useEventCallback(callback || setRecords);\n  useCustomEffect(function () {\n    if (!element) return; // The behavior around reusing mutation observers is confusing\n    // observing again _should_ disable the last listener but doesn't\n    // seem to always be the case, maybe just in JSDOM? In any case the cost\n    // to redeclaring it is gonna be fairly low anyway, so make it simple\n\n    var observer = new MutationObserver(handler);\n    observer.observe(element, config);\n    return function () {\n      observer.disconnect();\n    };\n  }, [element, config], {\n    isEqual: isDepsEqual,\n    // Intentionally done in render, otherwise observer will miss any\n    // changes made to the DOM during this update\n    effectHook: useImmediateUpdateEffect\n  });\n  return callback ? void 0 : records || [];\n}\n\nexport default useMutationObserver;"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkC;EAChC,IAAIC,WAAW,GAAGF,IAAI,CAAC,CAAD,CAAtB;EAAA,IACIG,UAAU,GAAGH,IAAI,CAAC,CAAD,CADrB;EAEA,IAAII,WAAW,GAAGH,KAAK,CAAC,CAAD,CAAvB;EAAA,IACII,UAAU,GAAGJ,KAAK,CAAC,CAAD,CADtB;EAEA,OAAOC,WAAW,KAAKE,WAAhB,IAA+BT,MAAM,CAACQ,UAAD,EAAaE,UAAb,CAA5C;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8CC,QAA9C,EAAwD;EACtD,IAAIC,SAAS,GAAGZ,QAAQ,CAAC,IAAD,CAAxB;EAAA,IACIa,OAAO,GAAGD,SAAS,CAAC,CAAD,CADvB;EAAA,IAEIE,UAAU,GAAGF,SAAS,CAAC,CAAD,CAF1B;;EAIA,IAAIG,OAAO,GAAGhB,gBAAgB,CAACY,QAAQ,IAAIG,UAAb,CAA9B;EACAlB,eAAe,CAAC,YAAY;IAC1B,IAAI,CAACa,OAAL,EAAc,OADY,CACJ;IACtB;IACA;IACA;;IAEA,IAAIO,QAAQ,GAAG,IAAIC,gBAAJ,CAAqBF,OAArB,CAAf;IACAC,QAAQ,CAACE,OAAT,CAAiBT,OAAjB,EAA0BC,MAA1B;IACA,OAAO,YAAY;MACjBM,QAAQ,CAACG,UAAT;IACD,CAFD;EAGD,CAXc,EAWZ,CAACV,OAAD,EAAUC,MAAV,CAXY,EAWO;IACpBU,OAAO,EAAEnB,WADW;IAEpB;IACA;IACAoB,UAAU,EAAEvB;EAJQ,CAXP,CAAf;EAiBA,OAAOa,QAAQ,GAAG,KAAK,CAAR,GAAYE,OAAO,IAAI,EAAtC;AACD;;AAED,eAAeL,mBAAf"},"metadata":{},"sourceType":"module"}